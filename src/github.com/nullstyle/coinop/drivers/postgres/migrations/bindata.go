// Code generated by go-bindata.
// sources:
// 1_initial_schema.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x94\x41\xef\x93\x40\x10\xc5\xef\x7c\x8a\x39\xfe\x1b\xad\xb1\x8d\x3d\xf5\x84\x82\x49\x23\xd2\x4a\x20\xb1\x27\xb2\x85\x29\x5d\x61\x77\xc9\xee\x42\x83\x9f\xde\xa5\xd8\xda\x50\xb4\xe0\xe1\xcf\x91\xfd\xbd\xd9\xc9\x7b\x33\x3b\x9f\xc3\x1b\x46\x33\x49\x34\x42\x54\x5a\x9f\x02\xd7\x0e\x5d\x08\xed\x8f\x9e\x0b\x89\xa0\x5c\x94\xef\xce\x78\x38\x09\x91\x2b\x78\xb1\xc0\x7c\x34\x85\x03\xcd\x14\x4a\x4a\x0a\xd8\x05\x9b\xaf\x76\xb0\x87\x2f\xee\xfe\xed\xe5\xb4\x92\x05\x24\x27\x22\x49\xa2\x51\x42\x4d\x64\x43\x79\xf6\xb2\x78\xbf\xfc\x30\x03\x7f\x1b\x82\x1f\x79\x5e\x47\xa6\xa8\x34\xe5\x44\x53\xc1\xe3\x23\x2d\x5a\xfc\x51\xb8\x5c\xad\xfa\x3a\x86\x4c\xc4\xba\x29\xf1\xdf\xaa\x3b\x78\x04\x97\x48\x34\x0e\xa4\x31\xd1\xa0\x29\x33\x9d\x11\x56\xc2\x99\xea\x93\xa8\xba\x3f\xf0\x53\x70\xec\x75\x52\x95\xe9\x08\x91\x35\x5b\x5f\x6d\xdd\xf8\x8e\xfb\x1d\xb6\xfe\xa3\xb3\xc6\x36\x83\x0d\xda\x9f\x62\x41\x6b\xe3\x36\x8e\x0b\xc0\xa0\xca\x58\xda\x22\x94\xeb\x5b\xc7\xe0\xb8\x9f\xed\xc8\x0b\x61\x31\x25\xa7\x0b\x5a\x92\x86\x21\xd7\x71\x49\x4c\xc5\x2c\xd6\x22\x47\x3e\x2e\xaa\xab\xf2\x28\x05\x9b\xa6\xd0\x62\x1a\x7f\x1b\x8a\xe9\xb2\x69\x0a\xa2\x14\xea\xff\xb8\xa9\xd3\x25\x22\xfd\x9b\x6e\x08\xa7\x4a\x55\x4f\x06\xf7\x26\x60\xa2\x32\x71\xf7\x52\xff\x9d\xa0\x99\x4c\xf9\x7c\x50\xbb\x82\x05\x51\x26\x30\x42\x8b\x91\xbc\xaa\x92\x04\x31\x1d\x41\xbf\xc6\xa2\x0d\x6e\x50\x5e\x5f\x36\x27\xc7\x66\x4c\x66\x35\x29\x2a\x84\x1f\x4a\xf0\xc3\xdd\xea\x46\xfe\xe6\x5b\xf4\xb8\xc1\x6d\x69\x53\xb7\xbd\xf9\xfe\x25\x75\xc4\x99\x5b\x4e\xb0\xdd\xf5\x1b\x59\x0f\xfc\xfd\xb3\xe0\x43\xa7\xd7\x37\x62\x6d\xfd\x0a\x00\x00\xff\xff\x7b\xed\x76\x53\xab\x05\x00\x00")

func _1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initial_schemaSql,
		"1_initial_schema.sql",
	)
}

func _1_initial_schemaSql() (*asset, error) {
	bytes, err := _1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initial_schema.sql", size: 1451, mode: os.FileMode(420), modTime: time.Unix(1449992574, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_initial_schema.sql": _1_initial_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1_initial_schema.sql": &bintree{_1_initial_schemaSql, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

