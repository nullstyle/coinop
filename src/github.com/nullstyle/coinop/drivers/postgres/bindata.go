// Code generated by go-bindata.
// sources:
// migrations/1_initial_schema.sql
// DO NOT EDIT!

package postgres

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x94\x4d\x6f\xaa\x40\x14\x86\xf7\xfc\x8a\xb3\xd4\xdc\xeb\xcd\xd5\xd4\x95\x2b\x5a\x68\x62\x4a\xd1\x10\x4c\xea\x8a\x8c\x70\xc4\x13\x99\x19\x32\x33\x68\xec\xaf\xef\x54\xaa\x31\x7e\x54\xe8\xa2\x2e\x9d\xe7\x81\xc9\xfb\x9e\x43\xaf\x07\x7f\x38\xe5\x8a\x19\x84\x59\xe9\x3c\x45\xbe\x1b\xfb\x10\xbb\x8f\x81\x0f\xa9\x24\x21\xcb\x7f\x5b\x5c\xac\xa4\x5c\x6b\xe8\x38\x60\x7f\x94\xc1\x82\x72\x8d\x8a\x58\x01\xd3\x68\xfc\xea\x46\x73\x78\xf1\xe7\x7f\xf7\xa7\x95\x2a\x20\x5d\x31\xc5\x52\x83\x0a\x36\x4c\xed\x48\xe4\x9d\xfe\xff\xc1\x43\x17\xc2\x49\x0c\xe1\x2c\x08\x6a\x32\x43\x6d\x48\x30\x43\x52\x24\x4b\x2a\x3e\xf1\x4b\x71\x30\x1c\x9e\x7b\x1c\xb9\x4c\xcc\xae\xc4\xef\xad\x13\xb8\x01\x97\x2a\xb4\x09\x64\x09\x33\x60\x88\xdb\x9b\x31\x5e\xc2\x96\xcc\x4a\x56\xf5\x3f\xf0\x2e\x05\x9e\xdd\xa4\x2a\xb3\x06\x92\xd3\x1d\x1d\x62\x1d\x87\x9e\xff\x06\x93\xf0\x32\x59\x1b\x9b\xc5\xae\xc6\x9f\x61\x41\x1b\x9b\x36\x36\x2b\xc0\xa2\xda\x46\x0a\x24\xcc\xf1\xba\xe0\xf9\xcf\xee\x2c\x88\xa1\xdf\xa6\xa4\x3d\x5a\xb2\x1d\x47\x61\x92\x92\xe5\x96\x49\x8c\x5c\xa3\x68\xd6\xd3\xc1\x5c\x2a\xc9\xdb\x19\x46\xb6\xe3\x8f\x13\xd1\x5e\x6b\x67\x30\xad\xd1\xfc\xe0\x4d\xb5\x97\xca\xec\x96\x77\x0d\x27\xad\xab\x3b\x53\x7b\x14\xb8\xac\x6c\xdd\x76\x2a\x4e\x5b\xff\x6a\xd0\x8e\xa5\xba\x3f\xa5\xf5\x03\x0b\xa6\x6d\x61\x8c\x8a\x86\xbc\xae\xd2\x14\x31\x6b\x40\xff\xc6\x96\x39\xce\xe9\xd7\xcc\x93\x5b\xe1\x78\xd1\x64\x7a\x6b\x9d\x46\x57\x4e\x0f\x1b\x39\x72\x3e\x02\x00\x00\xff\xff\x90\x0b\xd8\x0e\x19\x05\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 1305, mode: os.FileMode(420), modTime: time.Unix(1449969662, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

